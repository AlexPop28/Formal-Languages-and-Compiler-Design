(
  (non_terminals
    (
      start
      program
      statement
      variable_declaration
      assignment
      if_expression
      while_expression
      type
      get_call
      set_call
      read_call
      print_call
      
      bool_operator 

      expression
      term
    )
  )
  (terminals
    ("+" "-" "*" "/" "%" "==" "<" "<=" ">" ">=" "=" "!=" "{" "}" "(" ")" ";" "," int str double get set read_int read_str read_double print_int print_str print_double if else while id const)
  )
  (starting_symbol start)
  (productions
    (
      ((start) ("{" program "}"))
      ((program) (statement))
      ((program) (program statement))
      ((statement) (variable_declaration ";"))
      ((statement) (expression ";"))
      ((statement) (assignment))
      ((statement) (if_expression))
      ((statement) (while_expression))

      ((type) (int))
      ((type) (str))
      ((type) (double))

      ((variable_declaration) (type id))

      ((expression) (get_call))
      ((expression) (set_call))
      ((expression) (read_call))
      ((expression) (print_call))

      ((get_call) (get "(" expression "," expression ")"))
      ((set_call) (set "(" expression "," expression "," expression ")"))

      ((read_call) (read_int "(" ")"))
      ((read_call) (read_str "(" ")"))
      ((read_call) (read_double "(" ")"))

      ((print_call) (print_int "(" expression ")"))
      ((print_call) (print_str "(" expression ")"))
      ((print_call) (print_double "(" expression ")"))

      ((assignment) (expression "=" expression ";"))

      ((if_expression) (if "(" expression bool_operator expression ")" "{" program "}" ";"))
      ((if_expression) (if "(" expression bool_operator expression ")" "{" program "}" else "{" program "}" ";"))

      ((while_expression) (while "(" expression bool_operator expression ")" "{" program "}"))

      ((bool_operator) ("=="))
      ((bool_operator) ("!="))
      ((bool_operator) ("<"))
      ((bool_operator) (">"))
      ((bool_operator) ("<="))
      ((bool_operator) (">="))

      ((expression) (term))
      ((expression) (expression "+" term))
      ((expression) (expression "-" term))
      ((expression) (expression "*" term))
      ((expression) (expression "/" term))
      ((expression) (expression "%" term))

      ((term) (id))
      ((term) (const))
      ((term) ("(" expression ")"))
    )
  )
)

